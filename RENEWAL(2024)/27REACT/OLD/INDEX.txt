React 프로젝트를 처음부터 만들어 가는 단계별 목차는 아래와 같습니다.

1 React 개발 환경 설정

Node.js 및 npm 설치
Create React App 설치
React 앱 실행하기

2 JSX

JSX 문법 이해하기
JSX로 요소 생성하기
JSX에서 변수 사용하기
JSX에서 이벤트 처리하기

3 컴포넌트

컴포넌트 이해하기
함수형 컴포넌트와 클래스형 컴포넌트 비교하기
컴포넌트 분리하기
props와 state 이해하기

4 이벤트 처리

이벤트 처리 방법 이해하기
이벤트 객체 이해하기
이벤트 처리 함수 생성하기


5 조건부 렌더링

조건부 렌더링 방법 이해하기
삼항 연산자를 이용한 조건부 렌더링
&& 연산자를 이용한 조건부 렌더링
조건문을 이용한 조건부 렌더링

6 리스트와 키

리스트 이해하기
배열을 이용한 리스트 렌더링
리스트에 고유한 key 속성 설정하기
key 속성의 역할 이해하기

7 스타일링

스타일링 방법 이해하기
인라인 스타일링
CSS 파일을 이용한 스타일링
CSS 모듈을 이용한 스타일링


8 라우팅

리액트 라우팅 이해하기
react-router-dom 설치하기
Route 컴포넌트로 페이지 이동하기
Link 컴포넌트로 링크 만들기


9 컴포넌트간 통신 -o
Props를 이용한 통신
Context API를 이용한 통신


10 리액트의 훅 -o


11 리엑트HOC 
함수형 HOC
클래스형 HOC



12 Hoc
함수형 Hoc
클래스형 Hoc
기본제공 HOC

9 API 연동

RESTful API 이해하기
axios 패키지 설치하기
GET 요청하기
POST 요청하기

10 상태 관리

상태 관리 이해하기
Redux 설치하기
Redux 사용하기
Redux Toolkit 사용하기
이 외에도 React에 대한 다양한 주제가 있지만, 위 목차를 기반으로 React 개발을 시작할 수 있습니다.
---------------------------------------------------------------------
React에서는 몇 가지 기본 제공 HOC를 제공합니다. 각 HOC는 다른 목적을 가지고 있으며, React의 강력한 컴포넌트 시스템을 더욱 활용할 수 있게 해줍니다.

React.memo(): 이 HOC는 컴포넌트의 속성이 변경되지 않으면 이전 결과를 캐시하여 불필요한 렌더링을 방지합니다. 이를 통해 애플리케이션의 성능을 높일 수 있습니다.

React.forwardRef(): 이 HOC는 Refs API를 사용하여 하위 컴포넌트에 대한 참조를 자식으로 전달합니다. 이는 DOM 요소와 상호 작용해야 하는 컴포넌트를 만들 때 유용합니다.

React.lazy(): 이 HOC는 지연 로딩을 통해 애플리케이션의 성능을 향상시킵니다. 코드 분할을 사용하여 컴포넌트를 별도의 번들로 나누고 필요할 때만 로드합니다.

React.memo(): 이 HOC는 성능 최적화를 위해 이전 결과를 캐시하여 같은 속성으로 다시 렌더링하지 않도록 합니다.

React.contextType(): 이 HOC는 React Context API를 사용하여 컴포넌트에서 Context를 사용할 수 있게 합니다.

React.useCallback(): 이 HOC는 콜백 함수를 캐시하고 다시 사용할 수 있도록 해줍니다. 이는 자주 호출되는 콜백 함수의 성능을 최적화할 때 유용합니다.

React.useMemo(): 이 HOC는 메모이제이션을 사용하여 복잡한 계산을 캐시하고, 불필요한 렌더링을 방지합니다.

React.useEffect(): 이 HOC는 컴포넌트가 마운트되었을 때, 업데이트되었을 때, 언마운트되었을 때 등 다양한 시점에서 특정 동작을 수행하도록 합니다.

위에 나열된 HOC는 React에서 기본적으로 제공되는 몇 가지 HOC 중 일부입니다. 이들은 React의 강력한 컴포넌트 시스템을 더욱 활용하고, 성능을 향상시키는 데 유용합니다.