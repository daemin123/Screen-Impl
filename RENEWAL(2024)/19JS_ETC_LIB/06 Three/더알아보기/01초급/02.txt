1. 씬 (Scene) 생성
씬은 3D 객체를 포함하는 공간입니다. Three.js에서 씬을 생성하고 그 안에 3D 객체를 추가할 수 있습니다.

코드 예시
javascript
코드 복사
const scene = new THREE.Scene();  // 씬을 생성합니다.
2. 카메라 (Camera) 설정
카메라는 씬을 보는 시점을 정의합니다. Two 주요 카메라 유형은 PerspectiveCamera와 OrthographicCamera입니다. 일반적으로 3D 장면에는 PerspectiveCamera를 사용합니다.

코드 예시
javascript
코드 복사
const camera = new THREE.PerspectiveCamera(
    75,                       // 시야각 (Field of View)
    window.innerWidth / window.innerHeight,  // 종횡비 (Aspect Ratio)
    0.1,                      // 가까운 클리핑 평면 (Near Plane)
    1000                      // 먼 클리핑 평면 (Far Plane)
);
camera.position.z = 5;       // 카메라의 Z 위치 설정
3. 렌더러 (Renderer) 생성 및 설정
렌더러는 씬과 카메라를 사용하여 3D 장면을 화면에 그립니다. WebGLRenderer를 사용하여 렌더링합니다.

코드 예시
javascript
코드 복사
const renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);  // 렌더러 크기 설정
document.body.appendChild(renderer.domElement);  // 렌더러의 DOM 요소를 HTML에 추가
4. 기본 기하학적 형태 추가
Three.js에서는 여러 기본 기하학적 형태를 제공합니다. 예를 들어, 박스, 구, 원기둥 등이 있습니다.

코드 예시
javascript
코드 복사
// 박스 생성
const boxGeometry = new THREE.BoxGeometry();  // 박스의 기하학적 형태
const boxMaterial = new THREE.MeshBasicMaterial({ color: 0x00ff00 });  // 박스의 재질
const box = new THREE.Mesh(boxGeometry, boxMaterial);  // 박스 메쉬 생성
scene.add(box);  // 씬에 박스 추가

// 구 생성
const sphereGeometry = new THREE.SphereGeometry();  // 구의 기하학적 형태
const sphereMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });  // 구의 재질
const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);  // 구 메쉬 생성
sphere.position.x = 3;  // 구의 위치 조정
scene.add(sphere);  // 씬에 구 추가

// 원기둥 생성
const cylinderGeometry = new THREE.CylinderGeometry(1, 1, 2, 32);  // 원기둥의 기하학적 형태
const cylinderMaterial = new THREE.MeshBasicMaterial({ color: 0x0000ff });  // 원기둥의 재질
const cylinder = new THREE.Mesh(cylinderGeometry, cylinderMaterial);  // 원기둥 메쉬 생성
cylinder.position.x = -3;  // 원기둥의 위치 조정
scene.add(cylinder);  // 씬에 원기둥 추가
5. 조명 (Lights) 추가 및 효과 확인
조명은 씬의 객체에 조명을 비추어 3D 효과를 추가하는 데 사용됩니다. Three.js에서는 여러 종류의 조명이 있습니다. 여기서는 기본적인 AmbientLight와 DirectionalLight를 추가해보겠습니다.

코드 예시
javascript
코드 복사
// 앰비언트 조명 생성
const ambientLight = new THREE.AmbientLight(0x404040);  // 부드러운 전체 조명
scene.add(ambientLight);

// 방향 조명 생성
const directionalLight = new THREE.DirectionalLight(0xffffff, 1);  // 강한 방향성 조명
directionalLight.position.set(5, 5, 5);  // 조명의 위치 설정
scene.add(directionalLight);